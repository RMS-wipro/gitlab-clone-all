#!/usr/bin/python3

import argparse

from git import Repo

from gitlab_clone_all_utils import RepoProcessor


def _print_fetch_info(action, info_iter, heads, repo):
    for info in info_iter:
        head, commit = heads.get(info.ref, (None, None))
        if head and commit != info.commit:
            if head.commit == info.commit:
                print('{} {} -> {}'.format(action, head, info.ref))
            elif head.commit in info.commit.iter_parents():
                if head != repo.head.ref:
                    head.set_commit(info.commit)
                    print('{} {} -> {}'.format(action, head, info.ref))
                elif not repo.is_dirty():
                    repo.head.reset(info.commit, index=True, working_tree=True)
                    print('{} {} -> {}'.format('Reset', head, info.ref))
                else:
                    print('Working directory of {} branch is dirty!\n'
                          '{} {} -> {}'.format(head.name, action, info.ref, info.commit))
            else:
                print('{} {} -> {}'.format(action, info.ref, info.commit))
                if info.commit in head.commit.iter_parents():
                    print('Local head {} is ahead of the remote.'.format(head))
                else:
                    print('Local head {} is on a different branch.'.format(head))
            if info.note:
                print('NOTE: {}'.format(info.note))


class Worker(RepoProcessor):
    def _process(self, repo: Repo, path: str) -> None:
        remote = repo.remote(self._args.remote)
        if not remote.exists():
            return
        heads = {}
        r_heads = {ref.remote_head: ref for ref in remote.refs}
        for head in repo.heads:
            tb = head.tracking_branch()
            if tb:
                heads[tb] = (head, head.commit)
            elif self._args.set_remote:
                r_head = r_heads.get(head.name)
                if r_head:
                    print('{} is now tracking {}'.format(head.name, r_head.name))
                    head.set_tracking_branch(r_head)
                    heads[r_head] = (head, head.commit)
        if self._args.pull and not repo.is_dirty() and repo.active_branch.tracking_branch():
            _print_fetch_info('Pulled', remote.pull(), heads, repo)
        else:
            _print_fetch_info('Fetched', remote.fetch(), heads, repo)
        print('{} updated\n'.format(path))


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Fetch all branches of all the repositories '
                                                 'found under the current directory')
    parser.add_argument('-p', '--pull', action='store_true',
                        help='Pull active branch if the working directory is clean')
    parser.add_argument('-r', '--remote', type=str, default='origin',
                        help='Use this remote. Default: "origin"')
    parser.add_argument('-s', '--set-remote', action='store_true',
                        help="Set remote of local heads that don't have one but have a remote "
                             "head with the same name")
    Worker.execute(parser)
